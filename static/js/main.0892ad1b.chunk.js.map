{"version":3,"sources":["core/LCG.ts","components/LCGStore.ts","components/muiTheme.ts","components/components/components/Container/Content.tsx","utils/UseNonNullableContext/NoContextProviderError.ts","utils/UseNonNullableContext/useNonNullableContext.ts","components/components/Sidebar/Sidebar.tsx","components/components/Content/utils/formatNumber.ts","components/components/Content/Content.tsx","components/App.tsx","index.tsx"],"names":["LCG","constructor","seed","multiplier","increment","modulus","x","validateParameters","this","static","validateModulus","validateSeed","validateMultiplier","validateIncrement","forEach","result","RangeError","produce","reset","LCGStore","defaults","Object","freeze","quantity","output","makeAutoObservable","observable","ref","autoBind","generate","lcgParams","lcg","t0","performance","now","values","Array","from","length","tookMs","LCGStoreContext","createContext","muiTheme","createTheme","palette","mode","Container","observer","children","Paper","elevation","sx","height","padding","background","NoContextProviderError","Error","contextNameHint","super","trim","name","useNonNullableContext","context","store","useContext","Sidebar","lcgStore","handleSubmit","submitParameters","control","getValues","formState","errors","trigger","useForm","defaultValues","data","useEffect","Box","component","noValidate","autoComplete","display","flexDirection","gap","onChange","onSubmit","Typography","variant","rules","validate","Number","render","field","TextField","label","type","error","helperText","message","isInteger","Stack","Button","onClick","marginLeft","formatNumber","format","Content","chartData","setChartData","useState","getBins","bin","domain","thresholds","map","x0","x1","size","mb","ResponsiveContainer","width","margin","top","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","cursor","fill","content","active","payload","Legend","Bar","y","value","dy","fontSize","textAnchor","mt","ml","toFixed","justifyContent","alignItems","color","App","ThemeProvider","theme","CssBaseline","GlobalStyles","styles","Provider","Grid","maxWidth","container","maxHeight","spacing","item","xs","ReactDOM","StrictMode","document","getElementById"],"mappings":"sNAGO,MAAMA,EAWTC,aAAY,KACRC,EAAI,WACJC,EAAU,UACVC,EAAS,QACTC,IAMA,KApBKH,UAAI,OAEbI,OAAC,OAEDH,gBAAU,OAEVC,eAAS,OAETC,aAAO,EAaHL,EAAIO,mBAAmB,CACnBL,OACAC,aACAC,YACAC,YAGJG,KAAKN,KAAOA,EACZM,KAAKF,EAAIJ,EACTM,KAAKL,WAAaA,EAClBK,KAAKJ,UAAYA,EACjBI,KAAKH,QAAUA,CACnB,CAEAI,2BAA0B,KACtBP,EAAI,WACJC,EAAU,UACVC,EAAS,QACTC,IAOA,CACIL,EAAIU,gBAAgBL,GACpBL,EAAIW,aAAaT,EAAMG,GACvBL,EAAIY,mBAAmBT,EAAYE,GACnCL,EAAIa,kBAAkBT,EAAWC,IACnCS,SAASC,IACP,GAAsB,kBAAXA,EACP,MAAM,IAAIC,WAAWD,EACzB,GAER,CAEAN,oBAAoBP,EAAcG,GAC9B,OAAQH,GAAQ,GAAKA,EAAOG,GAAY,iCAC5C,CAEAI,0BAA0BN,EAAoBE,GAC1C,OAAQF,GAAc,GAAKA,EAAaE,GAAY,qCACxD,CAEAI,yBAAyBL,EAAmBC,GACxC,OAAQD,GAAa,GAAKA,EAAYC,GAAY,sCACtD,CAEAI,uBAAuBJ,GACnB,OAAOA,GAAW,GAAK,sBAC3B,CAEAY,UAGI,OAFAT,KAAKF,GAAKE,KAAKL,WAAaK,KAAKF,EAAIE,KAAKJ,WAAaI,KAAKH,QAErDG,KAAKF,CAChB,CAEAY,QACIV,KAAKF,EAAIE,KAAKN,IAClB,EChEG,MAAMiB,EACTlB,cAAe,KAeNmB,SAAuBC,OAAOC,OAAO,CAC1CpB,KAAM,EACNC,WAAY,QACZC,UAAW,WACXC,QAAS,GAAK,GACdkB,SAAU,MACX,KAEHC,OAAiB,KAtBbC,YACIjB,KACA,CACIY,SAAUM,IAAWC,IACrBH,OAAQE,IAAWC,KAEvB,CAAEC,UAAU,GAEpB,CAgBAC,UAAS,SAAEN,KAAaO,IACpB,MAAMC,EAAM,IAAI/B,EAAI8B,GAEdE,EAAKC,YAAYC,MAEjBC,EAASC,MAAMC,KAAK,CAAEC,OAAQf,IAAY,IAAMQ,EAAId,YAIpDsB,EAFKN,YAAYC,MAEHF,EAEpBxB,KAAKgB,OAAS,CACVe,SACAJ,YACGL,EACHP,WAER,CAEAL,QACIV,KAAKqB,SAASrB,KAAKY,SACvB,EAGG,MAAMoB,EAAkBC,wBAA+B,M,aCtEvD,MAAMC,EAAWC,YAAY,CAChCC,QAAS,CACLC,KAAM,U,wECAP,MAAMC,EAAsBC,aAAS,EAAGC,cAEvC,cAACC,EAAA,EAAK,CAACC,UAAW,EAAGC,GAAI,CAAEC,OAAQ,OAAQC,QAAS,EAAGC,WAAY,WAAY,SAC1EN,MCPN,MAAMO,UAA+BC,MACxCvD,YAAYwD,GACRC,OACK,mDACGD,EAAmB,SAAQA,KAAqB,KACjDE,QAGPnD,KAAKoD,KAAO,wBAChB,ECNG,MAAMC,EAA4BC,IACrC,MAAMC,EAAQC,qBAAWF,GAEzB,IAAKC,EAAO,MAAM,IAAIR,EAEtB,OAAOQ,CAAK,ECCHE,EAAoBlB,aAAS,KACtC,MAAMmB,EAAWL,EAAsBrB,IAGnC2B,aAAcC,EAAgB,QAC9BC,EAAO,MACPnD,EAAK,UACLoD,EACAC,WAAW,OAAEC,GAAQ,QACrBC,GACAC,YAAQ,CACRC,cAAe,CACXzE,KAAMgE,EAAS9C,SAASlB,KACxBC,WAAY+D,EAAS9C,SAASjB,WAC9BC,UAAW8D,EAAS9C,SAAShB,UAC7BC,QAAS6D,EAAS9C,SAASf,QAC3BkB,SAAU2C,EAAS9C,SAASG,UAEhCsB,KAAM,aAUJsB,EAAeC,GAAkBQ,GAASV,EAASrC,SAAS+C,KAMlE,OAJAC,qBAAU,KACNX,EAASrC,SAASqC,EAAS9C,SAAS,GACrC,CAAC8C,EAAUA,EAAS9C,WAGnB,cAAC0B,EAAS,UACN,eAACgC,EAAA,EAAG,CACAC,UAAU,OACVC,YAAU,EACVC,aAAa,MACb9B,GAAI,CACA+B,QAAS,OACTC,cAAe,SACfC,IAAK,GAETC,SAnBS,IAAwBZ,IAoBjCa,SAAUnB,EAAa,UAEvB,cAACoB,EAAA,EAAU,CAACC,QAAQ,YAAW,4BAC/B,cAAC,IAAU,CACP5B,KAAK,OACLS,QAASA,EACToB,MAAO,CACHC,SAAWxF,GACM,KAATA,EACO,mBAGJF,EAAIW,aAAagF,OAAOzF,GAAOoE,IAAYjE,UAG1DuF,OAAQ,EAAGC,YAAO,aACd,cAACC,EAAA,EAAS,CACNC,MAAM,OACNP,QAAQ,WACRQ,KAAK,SACLC,QAAe,OAANzB,QAAM,IAANA,MAAQtE,MACjBgG,WAAkB,OAAN1B,QAAM,IAANA,GAAY,QAAN,EAANA,EAAQtE,YAAI,WAAN,EAAN,EAAciG,WACtBN,GACN,IAGV,cAAC,IAAU,CACPjC,KAAK,aACLS,QAASA,EACToB,MAAO,CACHC,SAAWvF,GACY,KAAfA,EACO,yBAGJH,EAAIY,mBAAmB+E,OAAOxF,GAAamE,IAAYjE,UAGtEuF,OAAQ,EAAGC,YAAO,aACd,cAACC,EAAA,EAAS,CACNC,MAAM,aACNP,QAAQ,WACRQ,KAAK,SACLC,QAAe,OAANzB,QAAM,IAANA,MAAQrE,YACjB+F,WAAkB,OAAN1B,QAAM,IAANA,GAAkB,QAAZ,EAANA,EAAQrE,kBAAU,WAAZ,EAAN,EAAoBgG,WAC5BN,GACN,IAGV,cAAC,IAAU,CACPjC,KAAK,YACLS,QAASA,EACToB,MAAO,CACHC,SAAWtF,GACW,KAAdA,EACO,wBAGJJ,EAAIa,kBAAkB8E,OAAOvF,GAAYkE,IAAYjE,UAGpEuF,OAAQ,EAAGC,YAAO,aACd,cAACC,EAAA,EAAS,CACNC,MAAM,YACNP,QAAQ,WACRQ,KAAK,SACLC,QAAe,OAANzB,QAAM,IAANA,MAAQpE,WACjB8F,WAAkB,OAAN1B,QAAM,IAANA,GAAiB,QAAX,EAANA,EAAQpE,iBAAS,WAAX,EAAN,EAAmB+F,WAC3BN,GACN,IAGV,cAAC,IAAU,CACPjC,KAAK,UACLS,QAASA,EACToB,MAAO,CACHC,SAAWrF,GACS,KAAZA,EACO,sBAGJL,EAAIU,gBAAgBiF,OAAOtF,KAG1CuF,OAAQ,EAAGC,YAAO,aACd,cAACC,EAAA,EAAS,CACNC,MAAM,UACNP,QAAQ,WACRQ,KAAK,SACLC,QAAe,OAANzB,QAAM,IAANA,MAAQnE,SACjB6F,WAAkB,OAAN1B,QAAM,IAANA,GAAe,QAAT,EAANA,EAAQnE,eAAO,WAAT,EAAN,EAAiB8F,WACzBN,GACN,IAGV,cAAC,IAAU,CACPjC,KAAK,WACLS,QAASA,EACToB,MAAO,CACHC,SAAWnE,GACU,KAAbA,EACO,uBAINoE,OAAOS,UAAUT,OAAOpE,KAAcoE,OAAOpE,GAAY,GAC1D,uCAIZqE,OAAQ,EAAGC,YAAO,aACd,cAACC,EAAA,EAAS,CACNC,MAAM,WACNP,QAAQ,WACRQ,KAAK,SACLC,QAAe,OAANzB,QAAM,IAANA,MAAQjD,UACjB2E,WAAkB,OAAN1B,QAAM,IAANA,GAAgB,QAAV,EAANA,EAAQjD,gBAAQ,WAAV,EAAN,EAAkB4E,WAC1BN,GACN,IAGV,eAACQ,EAAA,EAAK,CAAClB,cAAc,MAAMC,IAAK,EAAE,UAC9B,cAACkB,EAAA,EAAM,CAACd,QAAQ,WAAWe,QAnJvB,KAChBrC,EAAShD,QACTA,GAAO,EAiJsDiC,GAAI,CAAEqD,WAAY,QAAS,mBAG5E,cAACF,EAAA,EAAM,CAACd,QAAQ,YAAYQ,KAAK,SAAQ,wBAKzC,I,8GCtLb,MAAMS,EAAeC,YAAO,OCQtBC,EAAoB5D,aAAS,KACtC,MAAMmB,EAAWL,EAAsBrB,IAChCoE,EAAWC,GAAgBC,mBAQhC,MAyBF,OAvBAjC,qBAAU,KACN,IAAKX,EAAS1C,OAGV,YAFAqF,EAAa,MAKjB,MAAME,EAAUC,cACXC,OAAO,CAAC,EAAG/C,EAAS1C,OAAOnB,QAAU,IACrC6G,WAAW,IAEhBL,EACIE,EAAQ7C,EAAS1C,OAAOW,QAAQgF,KAAI,EAAGC,KAAIC,KAAI/E,aAAQ,CACnDgF,KAAMhF,EACNyD,MAAQ,GAAgB,kBAAPqB,EAAkBX,EAAaW,GAAM,SACpC,kBAAPC,EAAkBZ,EAAaY,GAAM,QAEhDD,KACAC,SAEP,GACF,CAACnD,EAAS1C,SAER0C,EAAS1C,QAAWoF,EAWrB,cAAC9D,EAAS,UACN,eAACuD,EAAA,EAAK,CAACjD,OAAO,OAAM,UAChB,cAACmC,EAAA,EAAU,CAACC,QAAQ,YAAY+B,GAAI,EAAE,6BAGtC,cAACC,EAAA,EAAmB,CAACC,MAAM,OAAOrE,OAAO,MAAK,SAC1C,eAAC,IAAQ,CAACwB,KAAMgC,EAAWc,OAAQ,CAAEC,IAAK,IAAK,UAC3C,cAACC,EAAA,EAAa,CAACC,gBAAgB,QAC/B,cAACC,EAAA,EAAK,CAACC,QAAQ,UACf,cAACC,EAAA,EAAK,CAACD,QAAQ,SACf,cAACE,EAAA,EAAO,CACJC,OAAQ,CAAEC,KAAM,aAChBC,QAAS,EAAGC,SAAQC,cAAgC,IAAD,YAC/C,OAAKD,GAAkB,OAAPC,QAAO,IAAPA,KAAShG,OAKrB,cAACW,EAAA,EAAK,CAACC,UAAW,EAAE,SAChB,eAACmD,EAAA,EAAK,CAAChD,QAAS,EAAE,UACd,eAACkC,EAAA,EAAU,CAACC,QAAQ,UAAS,UACzB,2CAAsB,IAAY,QAAZ,EAAE8C,EAAQ,UAAE,OAAS,QAAT,EAAV,EAAYA,eAAO,WAAT,EAAV,EAAqBhB,KAAI,cAErD,eAAC/B,EAAA,EAAU,CAACC,QAAQ,UAAS,UACzB,kDACW,QADkB,EAC5B8C,EAAQ,UAAE,OAAS,QAAT,EAAV,EAAYA,eAAO,WAAT,EAAV,EAAqBlB,MAE1B,eAAC7B,EAAA,EAAU,CAACC,QAAQ,UAAS,UACzB,kDAA6B,IAAY,QAAZ,EAAE8C,EAAQ,UAAE,OAAS,QAAT,EAAV,EAAYA,eAAO,WAAT,EAAV,EAAqBjB,WAdzD,IAiBC,IAIpB,cAACkB,EAAA,EAAM,IACP,cAACC,EAAA,EAAG,CACAT,QAAQ,OACRI,KAAK,YACLpC,MAAO,EAAGzF,IAAGmI,IAAGC,WACZ,sBAAMpI,EAAGA,EAAI,GAAImI,EAAGA,EAAGE,IAAK,EAAGC,SAAS,KAAKT,KAAK,YAAYU,WAAW,SAAQ,SAC5EpC,EAAaiC,YAMlC,eAACnD,EAAA,EAAU,CAACC,QAAQ,WAAWsD,GAAG,OAAOC,GAAG,OAAM,2BAC/B7E,EAAS1C,OAAOe,OAAOyG,QAAQ,GAAE,cAzDxD,cAAClG,EAAS,UACN,cAACuD,EAAA,EAAK,CAACjD,OAAO,OAAO6F,eAAe,SAASC,WAAW,SAASN,SAAS,OAAM,SAC5E,cAAC,IAAY,CAACA,SAAS,UAAUO,MAAM,gBA0DvC,ICnGPC,EAAgB,KACzB,MAAOlF,GAAY4C,mBAAS,IAAI3F,GAEhC,OACI,eAACkI,EAAA,EAAa,CAACC,MAAO5G,EAAS,UAC3B,cAAC6G,EAAA,EAAW,IACZ,cAACC,EAAA,EAAY,CACTC,OAAQ,CACJ,mBAAoB,CAChBrG,OAAQ,WAIpB,cAACZ,EAAgBkH,SAAQ,CAAChB,MAAOxE,EAAS,SACtC,cAACmC,EAAA,EAAK,CAACjD,OAAO,OAAO6F,eAAe,SAASC,WAAW,SAAQ,SAC5D,eAACS,EAAA,EAAI,CAACC,SAAS,KAAKC,WAAS,EAACzG,OAAO,OAAO0G,UAAU,QAAQC,QAAS,EAAE,UACrE,cAACJ,EAAA,EAAI,CAACK,MAAI,EAACC,GAAI,EAAE,SACb,cAAChG,EAAO,MAEZ,cAAC0F,EAAA,EAAI,CAACK,MAAI,EAACC,GAAI,EAAE,SACb,cAACtD,EAAO,eAKZ,EC9BxBuD,IAAStE,OACL,cAAC,IAAMuE,WAAU,UACb,cAACf,EAAG,MAERgB,SAASC,eAAe,O","file":"static/js/main.0892ad1b.chunk.js","sourcesContent":["/**\n * @desc Linear Congruential Generator (LCG)\n */\nexport class LCG {\n    readonly seed: number;\n\n    x: number;\n\n    multiplier: number;\n\n    increment: number;\n\n    modulus: number;\n\n    constructor({\n        seed,\n        multiplier,\n        increment,\n        modulus,\n    }: {\n        seed: number;\n        multiplier: number;\n        increment: number;\n        modulus: number;\n    }) {\n        LCG.validateParameters({\n            seed,\n            multiplier,\n            increment,\n            modulus,\n        });\n\n        this.seed = seed;\n        this.x = seed;\n        this.multiplier = multiplier;\n        this.increment = increment;\n        this.modulus = modulus;\n    }\n\n    static validateParameters({\n        seed,\n        multiplier,\n        increment,\n        modulus,\n    }: {\n        seed: number;\n        multiplier: number;\n        increment: number;\n        modulus: number;\n    }): void {\n        [\n            LCG.validateModulus(modulus),\n            LCG.validateSeed(seed, modulus),\n            LCG.validateMultiplier(multiplier, modulus),\n            LCG.validateIncrement(increment, modulus),\n        ].forEach((result) => {\n            if (typeof result === 'string') {\n                throw new RangeError(result);\n            }\n        });\n    }\n\n    static validateSeed(seed: number, modulus: number): boolean | string {\n        return (seed >= 0 && seed < modulus) || 'Seed must be >= 0 and < modulus';\n    }\n\n    static validateMultiplier(multiplier: number, modulus: number): boolean | string {\n        return (multiplier >= 0 && multiplier < modulus) || 'Multiplier must be >= and < modulus';\n    }\n\n    static validateIncrement(increment: number, modulus: number): boolean | string {\n        return (increment >= 0 && increment < modulus) || 'Increment must be >= 0 and < modulus';\n    }\n\n    static validateModulus(modulus: number): boolean | string {\n        return modulus >= 2 || 'Modulus must be >= 2';\n    }\n\n    produce(): number {\n        this.x = (this.multiplier * this.x + this.increment) % this.modulus;\n\n        return this.x;\n    }\n\n    reset(): void {\n        this.x = this.seed;\n    }\n}\n","import { createContext } from 'react';\nimport { makeAutoObservable, observable } from 'mobx';\nimport { LCG } from '../core/LCG';\n\nexport interface Parameters {\n    seed: number;\n    multiplier: number;\n    increment: number;\n    modulus: number;\n    quantity: number;\n}\n\nexport type Output = {\n    tookMs: number;\n    values: number[];\n    seed: number;\n    multiplier: number;\n    increment: number;\n    modulus: number;\n    quantity: number;\n} | null;\n\nexport class LCGStore {\n    constructor() {\n        makeAutoObservable(\n            this,\n            {\n                defaults: observable.ref,\n                output: observable.ref,\n            },\n            { autoBind: true },\n        );\n    }\n\n    /**\n     * @desc Defaults come from \"Numerical Recipes from the \"quick and dirty generators\" list, Chapter 7.1, Eq. 7.1.6 parameters from Knuth and H. W. Lewis\"\n     * @link https://en.wikipedia.org/wiki/Linear_congruential_generator#:~:text=Numerical%20Recipes%20from%20the%20%22quick%20and%20dirty%20generators%22%20list%2C%20Chapter%207.1%2C%20Eq.%207.1.6%0Aparameters%20from%20Knuth%20and%20H.%20W.%20Lewis\n     */\n    readonly defaults: Parameters = Object.freeze({\n        seed: 1,\n        multiplier: 1664525,\n        increment: 1013904223,\n        modulus: 2 ** 32,\n        quantity: 10000,\n    });\n\n    output: Output = null;\n\n    generate({ quantity, ...lcgParams }: Parameters): void {\n        const lcg = new LCG(lcgParams);\n\n        const t0 = performance.now();\n\n        const values = Array.from({ length: quantity }, () => lcg.produce());\n\n        const t1 = performance.now();\n\n        const tookMs = t1 - t0;\n\n        this.output = {\n            tookMs,\n            values,\n            ...lcgParams,\n            quantity,\n        };\n    }\n\n    reset(): void {\n        this.generate(this.defaults);\n    }\n}\n\nexport const LCGStoreContext = createContext<LCGStore | null>(null);\n","import { createTheme } from '@mui/material';\n\nexport const muiTheme = createTheme({\n    palette: {\n        mode: 'dark',\n    },\n});\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Paper } from '@mui/material';\n\nexport const Container: React.FC = observer(({ children }) => {\n    return (\n        <Paper elevation={2} sx={{ height: '100%', padding: 2, background: '#272822' }}>\n            {children}\n        </Paper>\n    );\n});\n","export class NoContextProviderError extends Error {\n    constructor(contextNameHint?: string) {\n        super(\n            `Component is used outside of context provider. ${\n                contextNameHint ? `Check ${contextNameHint}.` : ''\n            }`.trim(),\n        );\n\n        this.name = 'NoContextProviderError';\n    }\n}\n","import React, { useContext } from 'react';\nimport { NoContextProviderError } from './NoContextProviderError';\n\nexport const useNonNullableContext = <T>(context: React.Context<T>): NonNullable<T> => {\n    const store = useContext(context);\n\n    if (!store) throw new NoContextProviderError();\n\n    return store as NonNullable<T>;\n};\n","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Box, Button, Stack, TextField, Typography } from '@mui/material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { Container } from '../components/Container';\nimport { LCGStoreContext } from '../../LCGStore';\nimport { useNonNullableContext } from '../../../utils/UseNonNullableContext';\nimport { LCG } from '../../../core/LCG';\n\nexport const Sidebar: React.FC = observer(() => {\n    const lcgStore = useNonNullableContext(LCGStoreContext);\n\n    const {\n        handleSubmit: submitParameters,\n        control,\n        reset,\n        getValues,\n        formState: { errors },\n        trigger,\n    } = useForm({\n        defaultValues: {\n            seed: lcgStore.defaults.seed,\n            multiplier: lcgStore.defaults.multiplier,\n            increment: lcgStore.defaults.increment,\n            modulus: lcgStore.defaults.modulus,\n            quantity: lcgStore.defaults.quantity,\n        },\n        mode: 'onChange',\n    });\n\n    const handleReset = (): void => {\n        lcgStore.reset();\n        reset();\n    };\n\n    const handleChange = (): Promise<boolean> => trigger();\n\n    const handleSubmit = submitParameters((data) => lcgStore.generate(data));\n\n    useEffect(() => {\n        lcgStore.generate(lcgStore.defaults);\n    }, [lcgStore, lcgStore.defaults]);\n\n    return (\n        <Container>\n            <Box\n                component=\"form\"\n                noValidate\n                autoComplete=\"off\"\n                sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: 3,\n                }}\n                onChange={handleChange}\n                onSubmit={handleSubmit}\n            >\n                <Typography variant=\"subtitle1\">LCG parameters</Typography>\n                <Controller\n                    name=\"seed\"\n                    control={control}\n                    rules={{\n                        validate: (seed: unknown): boolean | string => {\n                            if (seed === '') {\n                                return 'Seed is required';\n                            }\n\n                            return LCG.validateSeed(Number(seed), getValues().modulus);\n                        },\n                    }}\n                    render={({ field }): React.ReactElement => (\n                        <TextField\n                            label=\"Seed\"\n                            variant=\"standard\"\n                            type=\"number\"\n                            error={!!errors?.seed}\n                            helperText={errors?.seed?.message}\n                            {...field}\n                        />\n                    )}\n                />\n                <Controller\n                    name=\"multiplier\"\n                    control={control}\n                    rules={{\n                        validate: (multiplier: unknown): boolean | string => {\n                            if (multiplier === '') {\n                                return 'Multiplier is required';\n                            }\n\n                            return LCG.validateMultiplier(Number(multiplier), getValues().modulus);\n                        },\n                    }}\n                    render={({ field }): React.ReactElement => (\n                        <TextField\n                            label=\"Multiplier\"\n                            variant=\"standard\"\n                            type=\"number\"\n                            error={!!errors?.multiplier}\n                            helperText={errors?.multiplier?.message}\n                            {...field}\n                        />\n                    )}\n                />\n                <Controller\n                    name=\"increment\"\n                    control={control}\n                    rules={{\n                        validate: (increment: unknown): boolean | string => {\n                            if (increment === '') {\n                                return 'Increment is required';\n                            }\n\n                            return LCG.validateIncrement(Number(increment), getValues().modulus);\n                        },\n                    }}\n                    render={({ field }): React.ReactElement => (\n                        <TextField\n                            label=\"Increment\"\n                            variant=\"standard\"\n                            type=\"number\"\n                            error={!!errors?.increment}\n                            helperText={errors?.increment?.message}\n                            {...field}\n                        />\n                    )}\n                />\n                <Controller\n                    name=\"modulus\"\n                    control={control}\n                    rules={{\n                        validate: (modulus: unknown): boolean | string => {\n                            if (modulus === '') {\n                                return 'Modulus is required';\n                            }\n\n                            return LCG.validateModulus(Number(modulus));\n                        },\n                    }}\n                    render={({ field }): React.ReactElement => (\n                        <TextField\n                            label=\"Modulus\"\n                            variant=\"standard\"\n                            type=\"number\"\n                            error={!!errors?.modulus}\n                            helperText={errors?.modulus?.message}\n                            {...field}\n                        />\n                    )}\n                />\n                <Controller\n                    name=\"quantity\"\n                    control={control}\n                    rules={{\n                        validate: (quantity: unknown): boolean | string => {\n                            if (quantity === '') {\n                                return 'Quantity is required';\n                            }\n\n                            return (\n                                (Number.isInteger(Number(quantity)) && Number(quantity) > 0) ||\n                                'Quantity must be a positive integer'\n                            );\n                        },\n                    }}\n                    render={({ field }): React.ReactElement => (\n                        <TextField\n                            label=\"Quantity\"\n                            variant=\"standard\"\n                            type=\"number\"\n                            error={!!errors?.quantity}\n                            helperText={errors?.quantity?.message}\n                            {...field}\n                        />\n                    )}\n                />\n                <Stack flexDirection=\"row\" gap={1}>\n                    <Button variant=\"outlined\" onClick={handleReset} sx={{ marginLeft: 'auto' }}>\n                        Reset\n                    </Button>\n                    <Button variant=\"contained\" type=\"submit\">\n                        Run\n                    </Button>\n                </Stack>\n            </Box>\n        </Container>\n    );\n});\n","import { format } from 'd3-format';\n\n/** Format with SI-prefix and two significant digits */\nexport const formatNumber = format('.2s');\n","import React, { useEffect, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Paper, Stack, Typography } from '@mui/material';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport { bin } from 'd3-array';\nimport { CartesianGrid, Legend, Tooltip, XAxis, YAxis, BarChart, ResponsiveContainer, Bar } from 'recharts';\nimport { Container } from '../components/Container';\nimport { useNonNullableContext } from '../../../utils/UseNonNullableContext';\nimport { LCGStoreContext } from '../../LCGStore';\nimport { formatNumber } from './utils/formatNumber';\n\nexport const Content: React.FC = observer(() => {\n    const lcgStore = useNonNullableContext(LCGStoreContext);\n    const [chartData, setChartData] = useState<\n        | {\n              size: number;\n              label: string;\n              x0: number | undefined;\n              x1: number | undefined;\n          }[]\n        | null\n    >(null);\n\n    useEffect(() => {\n        if (!lcgStore.output) {\n            setChartData(null);\n\n            return;\n        }\n\n        const getBins = bin()\n            .domain([0, lcgStore.output.modulus - 1])\n            .thresholds(10);\n\n        setChartData(\n            getBins(lcgStore.output.values).map(({ x0, x1, length }) => ({\n                size: length,\n                label: `${typeof x0 === 'number' ? formatNumber(x0) : 'n/a'}-${\n                    typeof x1 === 'number' ? formatNumber(x1) : 'n/a'\n                }`,\n                x0,\n                x1,\n            })),\n        );\n    }, [lcgStore.output]);\n\n    if (!lcgStore.output || !chartData) {\n        return (\n            <Container>\n                <Stack height=\"100%\" justifyContent=\"center\" alignItems=\"center\" fontSize=\"64px\">\n                    <BarChartIcon fontSize=\"inherit\" color=\"disabled\" />\n                </Stack>\n            </Container>\n        );\n    }\n\n    return (\n        <Container>\n            <Stack height=\"100%\">\n                <Typography variant=\"subtitle1\" mb={3}>\n                    Frequency chart\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height=\"50%\">\n                    <BarChart data={chartData} margin={{ top: 16 }}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"label\" />\n                        <YAxis dataKey=\"size\" />\n                        <Tooltip\n                            cursor={{ fill: '#e1f5fe50' }}\n                            content={({ active, payload }): React.ReactNode => {\n                                if (!active || !payload?.length) {\n                                    return null;\n                                }\n\n                                return (\n                                    <Paper elevation={2}>\n                                        <Stack padding={1}>\n                                            <Typography variant=\"caption\">\n                                                <strong>Size:</strong> {payload[0]?.payload?.size} numbers\n                                            </Typography>\n                                            <Typography variant=\"caption\">\n                                                <strong>Bin lowest: </strong>\n                                                {payload[0]?.payload?.x0}\n                                            </Typography>\n                                            <Typography variant=\"caption\">\n                                                <strong>Bin highest:</strong> {payload[0]?.payload?.x1}\n                                            </Typography>\n                                        </Stack>\n                                    </Paper>\n                                );\n                            }}\n                        />\n                        <Legend />\n                        <Bar\n                            dataKey=\"size\"\n                            fill=\"lightBlue\"\n                            label={({ x, y, value }): React.ReactElement => (\n                                <text x={x + 20} y={y} dy={-4} fontSize=\"16\" fill=\"lightBlue\" textAnchor=\"middle\">\n                                    {formatNumber(value)}\n                                </text>\n                            )}\n                        />\n                    </BarChart>\n                </ResponsiveContainer>\n                <Typography variant=\"overline\" mt=\"auto\" ml=\"auto\">\n                    Generated in: {lcgStore.output.tookMs.toFixed(2)} ms\n                </Typography>\n            </Stack>\n        </Container>\n    );\n});\n","import React, { useState } from 'react';\nimport { CssBaseline, GlobalStyles, Grid, Stack } from '@mui/material';\nimport { ThemeProvider } from '@mui/material/styles';\nimport '@fontsource/roboto';\nimport { LCGStore, LCGStoreContext } from './LCGStore';\nimport { muiTheme } from './muiTheme';\nimport { Sidebar } from './components/Sidebar';\nimport { Content } from './components/Content';\n\nexport const App: React.FC = () => {\n    const [lcgStore] = useState(new LCGStore());\n\n    return (\n        <ThemeProvider theme={muiTheme}>\n            <CssBaseline />\n            <GlobalStyles\n                styles={{\n                    'body, html, #app': {\n                        height: '100%',\n                    },\n                }}\n            />\n            <LCGStoreContext.Provider value={lcgStore}>\n                <Stack height=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n                    <Grid maxWidth=\"md\" container height=\"100%\" maxHeight=\"768px\" spacing={2}>\n                        <Grid item xs={4}>\n                            <Sidebar />\n                        </Grid>\n                        <Grid item xs={8}>\n                            <Content />\n                        </Grid>\n                    </Grid>\n                </Stack>\n            </LCGStoreContext.Provider>\n        </ThemeProvider>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('app'),\n);\n"],"sourceRoot":""}